SCORE: 

1. E
2. B
3. C
4. D
5. D
6. B
7. B
8. F
9. B, E, 
10. F
11. F
12. F
13. C
14. C
15. C,D,E
16. D
17. A
18. A, B
19. C
20. C


4. C. The code compiles and runs without issue; therefore, option F is incorrect. This type of problem is best examined one loop iteration at a time:
The loop continues as count loop expression evaluates to 0 < 3, which is true, with y taking a new value of 1. The value of y is set to:
y = (1 + 2 * 1) % 3
= (1 + 2) % 3 =3% 3
=0
The first case block is called and the value of x is then set to: x=3-1= 2
The loop continues as count loop expression evaluates to 1 < 3, which is true, with y taking a new value of 2. The value of y is set to:
y = (1 + 2 * 2) % 3
= (1 + 4) % 3 =4% 3
=2
Introduction xxxix
xl Introduction The default block is called and the value of x is set to: x=2-1= 1
The loop continues as the count loop expression evaluates to 2 < 3, which is true, with y taking a new value of 3. The value of y is set to:
y = (1 + 2 * 3) % 3
= (1 + 6) % 3 =7% 3
=1
The second case block is called and the value of x is then set to: x=1+5= 6
The loop ends as the count loop expression evaluates to 3 < 3, with y also taking a new value of 4. The most recent value of x, 6, is output, so the answer is option C. For more information, see Chapter 2.




3. C, D, E. 
First, the method getTailLength() in the interface HasTail is assumed to be public, since it is part of an interface. 
The implementation of the method on line 3 is therefore an invalid override, 
as protected is a more restrictive access modifier than public, 
so option C is correct. 
Next, the class Cougar implements an overloaded version of getTailLength(), 
but since the declaration in the parent class Puma is invalid, it needs to implement a public version of the method. Since it does not, the declaration of Puma is invalid, so option D is correct.
Option E is incorrect, since Puma is marked abstract and cannot be instantiated. The overloaded method on line 11 is declared correctly, so option F is not correct. Finally, as the code has multiple compiler errors, options A, B, and G can be eliminated. For more information, see Chapter 5.


2. What is the result of the following code?
String s1 = "Java";
String s2 = "Java";
StringBuilder sb1 = new StringBuilder(); 
sb1.append("Ja").append("va"); 
System.out.println(s1 == s2); 
System.out.println(s1.equals(s2)); 
System.out.println(sb1.toString() == s1); 
System.out.println(sb1.toString().equals(s1));

A. true is printed out exactly once.
B. true is printed out exactly twice.
C. true is printed out exactly three times.
D. true is printed out exactly four times.
E. The code does not compile.



DeerDeerAge

count=0; y=0, x =2
count=1; y =2, x =2
count=2; y=1; x=7

abcde

public class MathFunctions {
	public static void addToInt(int x, int amountToAdd) {
		x = x + amountToAdd;
	}
	
	public static void main(String args[]){
		int a = 15;
		int b = 10;		
		MathFunctions.addToInt(a, b);
		System.out.println(a); 
	}
}
	
	
int[] array = {6, 9, 8};
List<Integer> list = new ArrayList<>();
list.add(6);
list.add(8); (6, 8)
list.set(1, array[1]); (6, 9);
list.remove(0); (9)
sysout(list);

